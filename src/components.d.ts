/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ClickWheeler {
        "size": number;
    }
}
export interface ClickWheelerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLClickWheelerElement;
}
declare global {
    interface HTMLClickWheelerElementEventMap {
        "rotate": any;
        "tap": any;
    }
    interface HTMLClickWheelerElement extends Components.ClickWheeler, HTMLStencilElement {
        addEventListener<K extends keyof HTMLClickWheelerElementEventMap>(type: K, listener: (this: HTMLClickWheelerElement, ev: ClickWheelerCustomEvent<HTMLClickWheelerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLClickWheelerElementEventMap>(type: K, listener: (this: HTMLClickWheelerElement, ev: ClickWheelerCustomEvent<HTMLClickWheelerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLClickWheelerElement: {
        prototype: HTMLClickWheelerElement;
        new (): HTMLClickWheelerElement;
    };
    interface HTMLElementTagNameMap {
        "click-wheeler": HTMLClickWheelerElement;
    }
}
declare namespace LocalJSX {
    interface ClickWheeler {
        "onRotate"?: (event: ClickWheelerCustomEvent<any>) => void;
        "onTap"?: (event: ClickWheelerCustomEvent<any>) => void;
        "size"?: number;
    }
    interface IntrinsicElements {
        "click-wheeler": ClickWheeler;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "click-wheeler": LocalJSX.ClickWheeler & JSXBase.HTMLAttributes<HTMLClickWheelerElement>;
        }
    }
}
